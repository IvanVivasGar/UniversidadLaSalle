import Foundation

// EJERCICIO 8: Clases, Propiedades y M√©todos
// Objetivo: Implementar clases con propiedades (almacenadas y computadas) y m√©todos

print("=== EJERCICIO 8: Clases, Propiedades y M√©todos ===\n")

// 1. Define una clase llamada Libro
class Libro {
    // 2. Propiedades almacenadas
    var titulo: String
    var autor: String
    var numeroPaginas: Int
    var anoPublicacion: Int
    
    // 3. Propiedad computada llamada descripcion
    var descripcion: String {
        return "\(titulo) por \(autor), publicado en \(anoPublicacion)."
    }
    
    // Propiedades computadas adicionales
    var esClasico: Bool {
        let anoActual = Calendar.current.component(.year, from: Date())
        return (anoActual - anoPublicacion) > 50
    }
    
    var categoria: String {
        switch numeroPaginas {
        case 0..<100:
            return "Folleto"
        case 100..<300:
            return "Libro corto"
        case 300..<500:
            return "Libro est√°ndar"
        case 500..<800:
            return "Libro largo"
        default:
            return "Libro √©pico"
        }
    }
    
    // 4. Inicializador para la clase Libro
    init(titulo: String, autor: String, numeroPaginas: Int, anoPublicacion: Int) {
        self.titulo = titulo
        self.autor = autor
        self.numeroPaginas = numeroPaginas
        self.anoPublicacion = anoPublicacion
        
        print("üìö Libro creado: \(titulo)")
    }
    
    // 5. M√©todo de instancia esLibroLargo()
    func esLibroLargo() -> Bool {
        return numeroPaginas > 500
    }
    
    // M√©todos adicionales
    func informacionCompleta() {
        print("=" * 50)
        print("üìñ INFORMACI√ìN DEL LIBRO")
        print("T√≠tulo: \(titulo)")
        print("Autor: \(autor)")
        print("P√°ginas: \(numeroPaginas)")
        print("A√±o de publicaci√≥n: \(anoPublicacion)")
        print("Descripci√≥n: \(descripcion)")
        print("Categor√≠a: \(categoria)")
        print("Es libro largo: \(esLibroLargo() ? "S√≠" : "No")")
        print("Es cl√°sico: \(esClasico ? "S√≠" : "No")")
        print("=" * 50)
    }
    
    func tiempoLecturaEstimado(palabrasPorMinuto: Int = 200) -> Double {
        // Estimaci√≥n: 250 palabras por p√°gina en promedio
        let palabrasEstimadas = numeroPaginas * 250
        let minutos = Double(palabrasEstimadas) / Double(palabrasPorMinuto)
        return minutos / 60.0 // Convertir a horas
    }
    
    func actualizarInformacion(titulo: String? = nil, autor: String? = nil, 
                             numeroPaginas: Int? = nil, anoPublicacion: Int? = nil) {
        if let nuevoTitulo = titulo {
            self.titulo = nuevoTitulo
            print("‚úèÔ∏è T√≠tulo actualizado a: \(nuevoTitulo)")
        }
        if let nuevoAutor = autor {
            self.autor = nuevoAutor
            print("‚úèÔ∏è Autor actualizado a: \(nuevoAutor)")
        }
        if let nuevasPaginas = numeroPaginas {
            self.numeroPaginas = nuevasPaginas
            print("‚úèÔ∏è N√∫mero de p√°ginas actualizado a: \(nuevasPaginas)")
        }
        if let nuevoAno = anoPublicacion {
            self.anoPublicacion = nuevoAno
            print("‚úèÔ∏è A√±o de publicaci√≥n actualizado a: \(nuevoAno)")
        }
    }
    
    func compararCon(_ otroLibro: Libro) -> String {
        var comparaciones: [String] = []
        
        if self.numeroPaginas > otroLibro.numeroPaginas {
            comparaciones.append("m√°s largo (\(self.numeroPaginas) vs \(otroLibro.numeroPaginas) p√°ginas)")
        } else if self.numeroPaginas < otroLibro.numeroPaginas {
            comparaciones.append("m√°s corto (\(self.numeroPaginas) vs \(otroLibro.numeroPaginas) p√°ginas)")
        } else {
            comparaciones.append("igual longitud (\(self.numeroPaginas) p√°ginas)")
        }
        
        if self.anoPublicacion > otroLibro.anoPublicacion {
            comparaciones.append("m√°s reciente (\(self.anoPublicacion) vs \(otroLibro.anoPublicacion))")
        } else if self.anoPublicacion < otroLibro.anoPublicacion {
            comparaciones.append("m√°s antiguo (\(self.anoPublicacion) vs \(otroLibro.anoPublicacion))")
        } else {
            comparaciones.append("del mismo a√±o (\(self.anoPublicacion))")
        }
        
        return "'\(self.titulo)' es \(comparaciones.joined(separator: " y ")) que '\(otroLibro.titulo)'"
    }
}

// 6. Crea dos instancias de Libro con diferentes datos
print("üìö CREANDO INSTANCIAS DE LIBROS")
print("=" * 35)

let libro1 = Libro(
    titulo: "El Principito",
    autor: "Antoine de Saint-Exup√©ry",
    numeroPaginas: 96,
    anoPublicacion: 1943
)

let libro2 = Libro(
    titulo: "Don Quijote de la Mancha",
    autor: "Miguel de Cervantes",
    numeroPaginas: 863,
    anoPublicacion: 1605
)

// 7. Imprime la descripcion de cada libro y si es o no un libro largo
print("\nüìã INFORMACI√ìN B√ÅSICA DE LOS LIBROS")
print("=" * 40)

print("\nüîπ LIBRO 1:")
print("Descripci√≥n: \(libro1.descripcion)")
print("¬øEs libro largo? \(libro1.esLibroLargo() ? "S√≠ (m√°s de 500 p√°ginas)" : "No (500 p√°ginas o menos)")")

print("\nüîπ LIBRO 2:")
print("Descripci√≥n: \(libro2.descripcion)")
print("¬øEs libro largo? \(libro2.esLibroLargo() ? "S√≠ (m√°s de 500 p√°ginas)" : "No (500 p√°ginas o menos)")")

// DEMOSTRACIONES ADICIONALES
print("\n\nüöÄ DEMOSTRACIONES ADICIONALES")
print("=" * 40)

// Informaci√≥n completa de los libros
print("\nüìä INFORMACI√ìN COMPLETA:")
libro1.informacionCompleta()
libro2.informacionCompleta()

// Tiempo de lectura estimado
print("\n‚è±Ô∏è TIEMPO DE LECTURA ESTIMADO:")
let tiempoLectura1 = libro1.tiempoLecturaEstimado()
let tiempoLectura2 = libro2.tiempoLecturaEstimado()

print("üìñ \(libro1.titulo): \(String(format: "%.1f", tiempoLectura1)) horas")
print("üìñ \(libro2.titulo): \(String(format: "%.1f", tiempoLectura2)) horas")

// Comparaci√≥n entre libros
print("\nüîç COMPARACI√ìN ENTRE LIBROS:")
print(libro1.compararCon(libro2))

// Crear m√°s libros para demostrar diferentes categor√≠as
print("\n\nüìö CREANDO M√ÅS LIBROS PARA DEMOSTRAR CATEGOR√çAS")
print("=" * 55)

let libros = [
    Libro(titulo: "Gu√≠a R√°pida de Swift", autor: "Apple Inc.", numeroPaginas: 75, anoPublicacion: 2020),
    Libro(titulo: "Cien a√±os de soledad", autor: "Gabriel Garc√≠a M√°rquez", numeroPaginas: 417, anoPublicacion: 1967),
    Libro(titulo: "Guerra y Paz", autor: "Le√≥n Tolst√≥i", numeroPaginas: 1225, anoPublicacion: 1869),
    Libro(titulo: "El Hobbit", autor: "J.R.R. Tolkien", numeroPaginas: 310, anoPublicacion: 1937)
]

print("\nüìä RESUMEN DE TODOS LOS LIBROS:")
print("-" * 80)
print(String(format: "%-30s %-20s %-8s %-4s %-12s %-8s", 
             "T√≠tulo", "Autor", "P√°ginas", "A√±o", "Categor√≠a", "Cl√°sico"))
print("-" * 80)

for libro in libros {
    let autorCorto = libro.autor.count > 18 ? String(libro.autor.prefix(15)) + "..." : libro.autor
    let tituloCorto = libro.titulo.count > 28 ? String(libro.titulo.prefix(25)) + "..." : libro.titulo
    
    print(String(format: "%-30s %-20s %-8d %-4d %-12s %-8s",
                 tituloCorto,
                 autorCorto,
                 libro.numeroPaginas,
                 libro.anoPublicacion,
                 libro.categoria,
                 libro.esClasico ? "S√≠" : "No"))
}

// Actualizaci√≥n de informaci√≥n
print("\n\n‚úèÔ∏è ACTUALIZANDO INFORMACI√ìN DE UN LIBRO")
print("=" * 45)

print("Informaci√≥n original de '\(libro1.titulo)':")
print("P√°ginas: \(libro1.numeroPaginas)")

libro1.actualizarInformacion(numeroPaginas: 120)

print("Informaci√≥n actualizada:")
print("P√°ginas: \(libro1.numeroPaginas)")
print("Nueva categor√≠a: \(libro1.categoria)")

// Estad√≠sticas de la colecci√≥n
print("\n\nüìà ESTAD√çSTICAS DE LA COLECCI√ìN")
print("=" * 40)

let todosLosLibros = [libro1, libro2] + libros
let totalLibros = todosLosLibros.count
let totalPaginas = todosLosLibros.reduce(0) { $0 + $1.numeroPaginas }
let promediopaginas = Double(totalPaginas) / Double(totalLibros)
let librosLargos = todosLosLibros.filter { $0.esLibroLargo() }.count
let clasicos = todosLosLibros.filter { $0.esClasico }.count

print("Total de libros: \(totalLibros)")
print("Total de p√°ginas: \(totalPaginas)")
print("Promedio de p√°ginas: \(String(format: "%.1f", promediopaginas))")
print("Libros largos (>500 p√°ginas): \(librosLargos)")
print("Libros cl√°sicos (>50 a√±os): \(clasicos)")

// Libro m√°s largo y m√°s corto
if let libroMasLargo = todosLosLibros.max(by: { $0.numeroPaginas < $1.numeroPaginas }),
   let libroMasCorto = todosLosLibros.min(by: { $0.numeroPaginas < $1.numeroPaginas }) {
    
    print("\nüìè Extremos de la colecci√≥n:")
    print("Libro m√°s largo: '\(libroMasLargo.titulo)' (\(libroMasLargo.numeroPaginas) p√°ginas)")
    print("Libro m√°s corto: '\(libroMasCorto.titulo)' (\(libroMasCorto.numeroPaginas) p√°ginas)")
}

print("\n‚úÖ Demostraci√≥n de clases, propiedades y m√©todos completada!")
