import Foundation

// EJERCICIO 9: Herencia y Polimorfismo
// Objetivo: Aplicar herencia para crear jerarqu√≠as de clases y polimorfismo

print("=== EJERCICIO 9: Herencia y Polimorfismo ===\n")

// 1. Define una clase base llamada Vehiculo
class Vehiculo {
    // Propiedades
    var marca: String
    var modelo: String
    
    // Inicializador que acepte marca y modelo
    init(marca: String, modelo: String) {
        self.marca = marca
        self.modelo = modelo
        print("üöó Creando veh√≠culo: \(marca) \(modelo)")
    }
    
    // M√©todo describirVehiculo()
    func describirVehiculo() {
        print("Veh√≠culo: \(marca) \(modelo)")
    }
    
    // M√©todo arrancarMotor() (ser√° sobrescrito)
    func arrancarMotor() {
        print("El motor del veh√≠culo ha arrancado.")
    }
    
    // M√©todos adicionales de la clase base
    func detenerMotor() {
        print("El motor del \(marca) \(modelo) se ha detenido.")
    }
    
    func acelerar() {
        print("El \(marca) \(modelo) est√° acelerando.")
    }
    
    func frenar() {
        print("El \(marca) \(modelo) est√° frenando.")
    }
}

// 2. Crea una clase Coche que herede de Vehiculo
class Coche: Vehiculo {
    // A√±ade una propiedad numeroPuertas
    var numeroPuertas: Int
    
    // Sobrescribe el inicializador para incluir numeroPuertas
    init(marca: String, modelo: String, numeroPuertas: Int) {
        self.numeroPuertas = numeroPuertas
        // Llama al inicializador de la superclase
        super.init(marca: marca, modelo: modelo)
        print("üöô Coche creado con \(numeroPuertas) puertas")
    }
    
    // Sobrescribe el m√©todo arrancarMotor()
    override func arrancarMotor() {
        print("El motor del coche \(marca) \(modelo) ha arrancado suavemente.")
    }
    
    // M√©todos espec√≠ficos del coche
    func abrirPuertas() {
        print("Abriendo las \(numeroPuertas) puertas del \(marca) \(modelo)")
    }
    
    func activarAireAcondicionado() {
        print("üí® Aire acondicionado activado en el \(marca) \(modelo)")
    }
    
    override func acelerar() {
        super.acelerar() // Llama al m√©todo de la clase padre
        print("El coche est√° cambiando suavemente de velocidad.")
    }
}

// 3. Crea una clase Motocicleta que herede de Vehiculo
class Motocicleta: Vehiculo {
    // A√±ade una propiedad tipoManillar
    var tipoManillar: String
    
    // Sobrescribe el inicializador para incluir tipoManillar
    init(marca: String, modelo: String, tipoManillar: String) {
        self.tipoManillar = tipoManillar
        // Llama al inicializador de la superclase
        super.init(marca: marca, modelo: modelo)
        print("üèçÔ∏è Motocicleta creada con manillar \(tipoManillar)")
    }
    
    // Sobrescribe el m√©todo arrancarMotor()
    override func arrancarMotor() {
        print("El motor de la motocicleta \(marca) \(modelo) ruge al arrancar.")
    }
    
    // M√©todos espec√≠ficos de la motocicleta
    func hacerCaballito() {
        print("üèÅ ¬°La \(marca) \(modelo) est√° haciendo un caballito!")
    }
    
    func inclinarEnCurva() {
        print("üèçÔ∏è La motocicleta se inclina elegantemente en la curva")
    }
    
    override func acelerar() {
        super.acelerar()
        print("La motocicleta acelera r√°pidamente con un rugido del motor.")
    }
}

// 4. Crea una instancia de Coche y una de Motocicleta
print("\nüè≠ CREANDO INSTANCIAS DE VEH√çCULOS")
print("=" * 40)

let miCoche = Coche(marca: "Toyota", modelo: "Corolla", numeroPuertas: 4)
let miMotocicleta = Motocicleta(marca: "Yamaha", modelo: "R1", tipoManillar: "Deportivo")

// 5. Crea un array llamado misVehiculos que contenga ambas instancias
print("\nüöó CREANDO ARRAY DE VEH√çCULOS")
print("=" * 35)

let misVehiculos: [Vehiculo] = [miCoche, miMotocicleta]
print("Array creado con \(misVehiculos.count) veh√≠culos")

// 6. Itera sobre el array y llama al m√©todo arrancarMotor() (POLIMORFISMO)
print("\nüî• DEMOSTRACI√ìN DE POLIMORFISMO")
print("=" * 38)

print("Arrancando todos los veh√≠culos:")
for (index, vehiculo) in misVehiculos.enumerated() {
    print("\n--- Veh√≠culo \(index + 1) ---")
    vehiculo.describirVehiculo()
    vehiculo.arrancarMotor() // ¬°Polimorfismo en acci√≥n!
}

// DEMOSTRACIONES ADICIONALES
print("\n\nüöÄ DEMOSTRACIONES ADICIONALES")
print("=" * 40)

// Uso de m√©todos espec√≠ficos de cada clase
print("\nüîß M√âTODOS ESPEC√çFICOS DE CADA CLASE:")
print("--- Coche ---")
miCoche.abrirPuertas()
miCoche.activarAireAcondicionado()

print("\n--- Motocicleta ---")
miMotocicleta.hacerCaballito()
miMotocicleta.inclinarEnCurva()

// Demostraci√≥n de herencia de m√©todos
print("\nüîÑ M√âTODOS HEREDADOS DE LA CLASE BASE:")
for vehiculo in misVehiculos {
    print("\n--- \(vehiculo.marca) \(vehiculo.modelo) ---")
    vehiculo.acelerar()
    vehiculo.frenar()
    vehiculo.detenerMotor()
}

// Crear m√°s veh√≠culos para una demostraci√≥n m√°s amplia
print("\n\nüè≠ CREANDO M√ÅS VEH√çCULOS")
print("=" * 30)

let cochesVariados = [
    Coche(marca: "BMW", modelo: "X5", numeroPuertas: 4),
    Coche(marca: "Tesla", modelo: "Model 3", numeroPuertas: 4),
    Coche(marca: "MINI", modelo: "Cooper", numeroPuertas: 2)
]

let motocicletasVariadas = [
    Motocicleta(marca: "Harley-Davidson", modelo: "Street 750", tipoManillar: "Crucero"),
    Motocicleta(marca: "Ducati", modelo: "Panigale", tipoManillar: "Deportivo"),
    Motocicleta(marca: "Honda", modelo: "Gold Wing", tipoManillar: "Touring")
]

// Array con todos los veh√≠culos
let todosLosVehiculos: [Vehiculo] = [miCoche, miMotocicleta] + cochesVariados + motocicletasVariadas

print("\nüöóüèçÔ∏è GESTI√ìN DE FLOTA COMPLETA")
print("=" * 35)

print("Total de veh√≠culos en la flota: \(todosLosVehiculos.count)")

// Contar por tipo usando type checking
var conteoCoches = 0
var conteoMotocicletas = 0

for vehiculo in todosLosVehiculos {
    if vehiculo is Coche {
        conteoCoches += 1
    } else if vehiculo is Motocicleta {
        conteoMotocicletas += 1
    }
}

print("Coches: \(conteoCoches)")
print("Motocicletas: \(conteoMotocicletas)")

// Demostraci√≥n de type casting
print("\nüîç TYPE CASTING Y ACCESO A PROPIEDADES ESPEC√çFICAS:")
for (index, vehiculo) in todosLosVehiculos.enumerated() {
    print("\n--- Veh√≠culo \(index + 1): \(vehiculo.marca) \(vehiculo.modelo) ---")
    
    if let coche = vehiculo as? Coche {
        print("   ‚úÖ Es un coche con \(coche.numeroPuertas) puertas")
    } else if let moto = vehiculo as? Motocicleta {
        print("   ‚úÖ Es una motocicleta con manillar \(moto.tipoManillar)")
    }
}

// Simulaci√≥n de arranque masivo
print("\n\nüöÄ SIMULACI√ìN DE ARRANQUE MASIVO (POLIMORFISMO)")
print("=" * 55)

func arrancarFlota(_ vehiculos: [Vehiculo]) {
    print("üî• Arrancando toda la flota...")
    for vehiculo in vehiculos {
        vehiculo.arrancarMotor() // Cada veh√≠culo usa su propia implementaci√≥n
    }
    print("‚úÖ Toda la flota est√° en marcha!")
}

arrancarFlota(todosLosVehiculos)

// Demostraci√≥n de m√©todo polim√≥rfico personalizado
print("\n\n‚ö° DEMOSTRACI√ìN DE ACELERACI√ìN POLIM√ìRFICA")
print("=" * 48)

func competencia(_ vehiculos: [Vehiculo]) {
    print("üèÅ ¬°Iniciando competencia!")
    for (index, vehiculo) in vehiculos.enumerated() {
        print("\nCompetidor \(index + 1): \(vehiculo.marca) \(vehiculo.modelo)")
        vehiculo.acelerar() // Comportamiento polim√≥rfico
    }
    print("\nüèÜ ¬°Competencia finalizada!")
}

// Seleccionar algunos veh√≠culos para la competencia
let competidores = Array(todosLosVehiculos.prefix(4))
competencia(competidores)

// Estad√≠sticas finales
print("\n\nüìä ESTAD√çSTICAS DE LA DEMOSTRACI√ìN")
print("=" * 40)

print("üìà Resumen de herencia y polimorfismo:")
print("‚Ä¢ Clase base: Vehiculo")
print("‚Ä¢ Clases derivadas: Coche, Motocicleta")
print("‚Ä¢ Total de instancias creadas: \(todosLosVehiculos.count)")
print("‚Ä¢ M√©todos sobrescritos: arrancarMotor(), acelerar()")
print("‚Ä¢ Polimorfismo demostrado: ‚úÖ")
print("‚Ä¢ Type casting utilizado: ‚úÖ")
print("‚Ä¢ Herencia de propiedades y m√©todos: ‚úÖ")

print("\n‚úÖ Demostraci√≥n de herencia y polimorfismo completada!")
