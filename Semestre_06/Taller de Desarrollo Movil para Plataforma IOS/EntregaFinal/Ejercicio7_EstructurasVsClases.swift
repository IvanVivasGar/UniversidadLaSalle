import Foundation

// EJERCICIO 7: Estructuras vs. Clases - Definici√≥n y Uso
// Objetivo: Entender las diferencias fundamentales entre estructuras y clases

print("=== EJERCICIO 7: Estructuras vs. Clases ===\n")

// PARTE 1: ESTRUCTURAS
print("üèóÔ∏è TRABAJANDO CON ESTRUCTURAS")
print("=" * 35)

// 1. Define una estructura llamada Punto
struct Punto {
    var x: Double
    var y: Double
    
    // 2. A√±ade un inicializador a la estructura Punto
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
        print("   üìç Creando punto en (\(x), \(y))")
    }
    
    // 3. A√±ade un m√©todo para calcular distancia al origen
    func distanciaAlOrigen() -> Double {
        // F√≥rmula: ‚àö(x¬≤ + y¬≤)
        let distancia = sqrt(pow(x, 2) + pow(y, 2))
        return distancia
    }
    
    // M√©todo adicional para mostrar informaci√≥n
    func descripcion() -> String {
        return "Punto(\(x), \(y))"
    }
    
    // M√©todo para calcular distancia a otro punto
    func distanciaA(_ otroPunto: Punto) -> Double {
        let deltaX = self.x - otroPunto.x
        let deltaY = self.y - otroPunto.y
        return sqrt(pow(deltaX, 2) + pow(deltaY, 2))
    }
}

// 4. Crea una instancia de Punto
print("\n1-4. Creando y usando instancia de Punto:")
let punto1 = Punto(x: 3.0, y: 4.0)
print("Punto creado: \(punto1.descripcion())")
print("Distancia al origen: \(punto1.distanciaAlOrigen())")

// Demostrando que las estructuras son tipos por valor
print("\nüìã Demostraci√≥n: Estructuras son tipos por VALOR")
var puntoOriginal = Punto(x: 1.0, y: 1.0)
var puntoCopia = puntoOriginal  // Se crea una COPIA

print("Punto original: \(puntoOriginal.descripcion())")
print("Punto copia: \(puntoCopia.descripcion())")

// Modificamos la copia
puntoCopia.x = 10.0
puntoCopia.y = 10.0

print("Despu√©s de modificar la copia:")
print("Punto original: \(puntoOriginal.descripcion()) ‚Üê NO cambi√≥")
print("Punto copia: \(puntoCopia.descripcion()) ‚Üê S√ç cambi√≥")

// PARTE 2: CLASES
print("\n\nüèõÔ∏è TRABAJANDO CON CLASES")
print("=" * 30)

// 5. Define una clase llamada FiguraGeometrica
class FiguraGeometrica {
    var nombre: String
    
    // 6. A√±ade un inicializador a la clase FiguraGeometrica
    init(nombre: String) {
        self.nombre = nombre
        print("   üî∑ Creando figura geom√©trica: \(nombre)")
    }
    
    // M√©todo describir()
    func describir() {
        print("Soy una figura geom√©trica llamada \(nombre)")
    }
    
    // M√©todos adicionales
    func cambiarNombre(a nuevoNombre: String) {
        let nombreAnterior = self.nombre
        self.nombre = nuevoNombre
        print("   üîÑ Nombre cambiado de '\(nombreAnterior)' a '\(nuevoNombre)'")
    }
}

// 7. Crea una instancia de FiguraGeometrica
print("\n5-7. Creando y usando instancia de FiguraGeometrica:")
let figura1 = FiguraGeometrica(nombre: "Tri√°ngulo")
figura1.describir()

// Demostrando que las clases son tipos por referencia
print("\nüìã Demostraci√≥n: Clases son tipos por REFERENCIA")
let figuraOriginal = FiguraGeometrica(nombre: "C√≠rculo")
let figuraReferencia = figuraOriginal  // Se crea una REFERENCIA

print("Figura original: \(figuraOriginal.nombre)")
print("Figura referencia: \(figuraReferencia.nombre)")

// Modificamos a trav√©s de la referencia
figuraReferencia.cambiarNombre(a: "Cuadrado")

print("Despu√©s de modificar a trav√©s de la referencia:")
print("Figura original: \(figuraOriginal.nombre) ‚Üê S√ç cambi√≥")
print("Figura referencia: \(figuraReferencia.nombre) ‚Üê S√ç cambi√≥")
print("¬°Ambas variables apuntan al MISMO objeto en memoria!")

// 8. Explicaci√≥n de diferencias clave
print("\n\nüìö DIFERENCIAS CLAVE: VALOR vs. REFERENCIA")
print("=" * 50)

print("""
üèóÔ∏è ESTRUCTURAS (Tipos por VALOR):
   ‚Ä¢ Se crea una COPIA completa cada vez que se asigna
   ‚Ä¢ Modificar una copia NO afecta el original
   ‚Ä¢ M√°s eficientes para datos simples e inmutables
   ‚Ä¢ Se almacenan en el stack (m√°s r√°pido)
   ‚Ä¢ √ötiles para: coordenadas, fechas, configuraciones

üèõÔ∏è CLASES (Tipos por REFERENCIA):
   ‚Ä¢ Se comparte la misma instancia en memoria
   ‚Ä¢ Modificar una referencia afecta TODAS las referencias
   ‚Ä¢ Permiten herencia y polimorfismo
   ‚Ä¢ Se almacenan en el heap (gesti√≥n de memoria m√°s compleja)
   ‚Ä¢ √ötiles para: objetos complejos, entidades que cambian
""")

// EJEMPLOS PR√ÅCTICOS ADICIONALES
print("\n\nüöÄ EJEMPLOS PR√ÅCTICOS ADICIONALES")
print("=" * 40)

// Ejemplo con m√∫ltiples puntos
print("\nTrabajando con m√∫ltiples puntos:")
let puntos = [
    Punto(x: 0, y: 0),
    Punto(x: 3, y: 4),
    Punto(x: -2, y: 6),
    Punto(x: 1, y: -1)
]

for (index, punto) in puntos.enumerated() {
    let distancia = punto.distanciaAlOrigen()
    print("Punto \(index + 1): \(punto.descripcion()) - Distancia al origen: \(String(format: "%.2f", distancia))")
}

// Ejemplo con m√∫ltiples figuras
print("\nTrabajando con m√∫ltiples figuras:")
let figuras = [
    FiguraGeometrica(nombre: "Pent√°gono"),
    FiguraGeometrica(nombre: "Hex√°gono"),
    FiguraGeometrica(nombre: "Oct√°gono")
]

for figura in figuras {
    figura.describir()
}

// Comparaci√≥n de rendimiento conceptual
print("\n‚ö° Consideraciones de rendimiento:")
print("‚Ä¢ Estructuras: Mejor para datos peque√±os que no cambian frecuentemente")
print("‚Ä¢ Clases: Mejor para objetos complejos que necesitan ser compartidos")

// Ejemplo de cu√°ndo usar cada uno
print("\nüéØ Cu√°ndo usar cada tipo:")
print("""
Usa ESTRUCTURAS para:
   ‚Ä¢ Coordenadas (Point, CGPoint)
   ‚Ä¢ Rangos (Range)
   ‚Ä¢ Configuraciones
   ‚Ä¢ Datos que se pasan por valor

Usa CLASES para:
   ‚Ä¢ Controladores de vista
   ‚Ä¢ Modelos de datos complejos
   ‚Ä¢ Managers y singletons
   ‚Ä¢ Objetos que necesitan herencia
""")

// Demostraci√≥n final con identidad de objetos
print("\nüîç Identidad de objetos (solo para clases):")
let figura2 = FiguraGeometrica(nombre: "Rombo")
let figura3 = FiguraGeometrica(nombre: "Rombo")
let figura4 = figura2

// Verificar si son el mismo objeto en memoria
print("figura2 y figura3 son el mismo objeto: \(figura2 === figura3)")  // false
print("figura2 y figura4 son el mismo objeto: \(figura2 === figura4)")  // true

print("\n¬°Estructuras no tienen identidad de objeto porque son tipos por valor!")
