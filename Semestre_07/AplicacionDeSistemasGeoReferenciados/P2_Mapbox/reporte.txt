Introducción

Este reporte documenta la práctica desarrollada: una aplicación web que integra Mapbox para visualizar datos de terremotos y un decágono dibujado por coordenadas. El objetivo fue cumplir con los puntos del enunciado: estructura HTML con navegación, un mapa visible en `div#map`, sección informativa, footer, estilos CSS, uso del estilo `streets-v11`, carga de un GeoJSON público de terremotos, visualización de puntos rojos, popups en 5 puntos, decágono como capa de líneas, controles de navegación y cambio de cursor sobre puntos.

Desarrollo (paso a paso con capturas)

En esta sección describo con detalle cada paso realizado, y junto a cada paso incluyo solo las capturas de código estrictamente necesarias (fragmentos relevantes) para mantener el documento legible.

1) Preparación del HTML y estructura inicial

    - Objetivo: crear la página base con navegación, el contenedor del mapa, una sección de información y el footer.
    - Detalles: el archivo `index.html` incluye referencias a `index.css` y a la librería Mapbox GL desde CDN. Se dejó un `div` con id `map` que es el elemento donde Mapbox renderiza el mapa.
    - Fragmento clave (estructura mínima de la parte relevante):
```html
<nav>...enlaces a secciones...</nav>
<main>
  <div id="map"></div>
  <section id="info">...texto explicativo...</section>
</main>
<footer>Contacto: ivg77850@lasallebajio.edu.mx</footer>
```

    - Observaciones: mantener el HTML limpio facilita la prueba y evita elementos superpuestos que puedan interceptar eventos de click sobre el mapa.

2) Estilos y presentación (CSS)

    - Objetivo: que la página tenga una apariencia sencilla y que el mapa sea claramente visible (altura 500px).
    - Detalles: el CSS define el layout centrado, estilos de la nav y el footer, y asegura que `#map` tenga 500px de alto.
    - Fragmento clave (solo la regla esencial del mapa):
```css
#map { width: 100%; height: 500px; border: 1px solid #ddd; border-radius: 6px; }
```

    - Observaciones: la regla anterior es suficiente para el requisito visual; el resto de estilos son auxiliares para presentación.

3) Inicializar Mapbox y controles

    - Objetivo: crear el objeto `map` con estilo `streets-v11`, centrar en Ciudad de México y añadir controles de navegación.
    - Detalles: se debe definir `mapboxgl.accessToken` antes de inicializar el mapa; en el proyecto el token está incluido en `index.js` (en un entorno real se recomienda guardar el token de forma segura).
    - Fragmento clave (inicialización mínima):
```javascript
mapboxgl.accessToken = '<TU_TOKEN>'; // reemplazar localmente
const map = new mapboxgl.Map({ container: 'map', style: 'mapbox://styles/mapbox/streets-v11', center: [-99.1332,19.4326], zoom: 5 });
map.addControl(new mapboxgl.NavigationControl());
```

    - Observaciones: la posición inicial y el zoom fueron elegidos para mostrar bien México y que el usuario identifique las ciudades de los 5 puntos.

4) Cargar GeoJSON público (USGS) y visualizar puntos rojos

    - Objetivo: añadir la fuente pública de terremotos y crear una capa que represente los eventos como círculos rojos.
    - Detalles: la fuente apunta al feed público de USGS; la capa usa `type: 'circle'` con `circle-color: '#ff0000'`.
    - Fragmento clave (añadir fuente y capa):
```javascript
map.addSource('earthquakes', { type: 'geojson', data: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson' });
map.addLayer({ id: 'earthquake-points', type: 'circle', source: 'earthquakes', paint: { 'circle-radius': 6, 'circle-color': '#ff0000' } });
```

    - Observaciones: mantener la capa separada permite mostrar datos reales del feed sin alterar los ejemplos locales que se usarán para las 5 pruebas con popups.

5) Seleccionar 5 puntos en México y habilitar popups al click

    - Objetivo: garantizar que haya exactamente 5 puntos sobre los que el usuario pueda hacer click y ver un popup con lugar y magnitud. Elegí crear una fuente local `selected-quakes` con 5 features ubicadas en ciudades mexicanas.
    - Razón: el feed público puede no contener eventos en las localizaciones exactas deseadas; con una fuente local controlamos las posiciones y garantizamos que hayan 5 puntos clicables.
    - Fragmento clave (ejemplo reducido: un feature y el manejador de click):
```javascript
const selectedQuakes = { type: 'FeatureCollection', features: [ { type:'Feature', properties:{place:'Ciudad de México', mag:4.2}, geometry:{type:'Point', coordinates:[-99.1332,19.4326]} } ] };
map.addSource('selected-quakes', { type:'geojson', data: selectedQuakes });
map.addLayer({ id:'selected-quakes-points', type:'circle', source:'selected-quakes', paint:{'circle-radius':10,'circle-color':'#ff0000'} });

map.on('click','selected-quakes-points',(e)=>{ const f = e.features[0]; new mapboxgl.Popup().setLngLat(f.geometry.coordinates).setHTML(`<strong>${f.properties.place}</strong><br/>Magnitud: ${f.properties.mag}`).addTo(map); });
```

    - Observaciones: en el archivo completo hay las cinco features (CDMX, Guadalajara, Monterrey, Oaxaca, Puebla); aquí sólo se muestra una por claridad. Además se aumentó el radio a 10 para facilitar el click.

6) Dibujar el decágono alrededor de un centro en México

    - Objetivo: generar un decágono exacto con 10 vértices y mostrarlo como una línea en el mapa.
    - Detalles: se calcula cada vértice con trigonometría simple (seno/coseno) alrededor de un centro (CDMX). Se añade la geometría como `LineString` en una fuente geojson y luego como capa `line`.
    - Fragmento clave (cálculo de vértices):
```javascript
const center = [-99.1332,19.4326]; const radius = 0.08; const decagonCoords = []; for(let i=0;i<10;i++){ const angle=(i/10)*(2*Math.PI); decagonCoords.push([ center[0]+radius*Math.cos(angle), center[1]+radius*Math.sin(angle) ]); } decagonCoords.push(decagonCoords[0]);
// añadir como fuente y capa de tipo 'line'
```

    - Observaciones: el radio está en grados decimales y es un valor pequeño apropiado para una vista regional; para tamaños precisos usar proyecciones o cálculos geodésicos.

7) Pruebas y verificación

    - Cómo probar: iniciar un servidor local y abrir `index.html`. Se debe ver el mapa centrado en CDMX, la capa USGS (si el feed contiene datos) y los cinco puntos rojos en México. Al hacer click en cualquiera de los cinco puntos locales aparece un popup con el lugar y la magnitud.
    - Fragmento de comprobación (consola):
```javascript
// en consola del navegador
map.getStyle().layers.map(l=>l.id).includes('selected-quakes-points'); // -> true si la capa existe
```

    - Observaciones finales de la etapa de pruebas: si no aparecen popups, revisar que la capa `selected-quakes-points` esté por encima de otras capas (se usa `map.moveLayer` en el código) y comprobar la consola por errores (token Mapbox inválido, CORS, etc.).


Resultados

- La aplicación cumple con los requisitos especificados en `context.txt`.
- El mapa está centrado en Ciudad de México y muestra:
  - la capa pública de terremotos (USGS) como puntos rojos,
  - cinco puntos de ejemplo en México que muestran un popup con lugar y magnitud al hacer click,
  - un decágono dibujado con una capa de líneas alrededor de CDMX,
  - controles de zoom/rotación y cambio de cursor al pasar por los puntos.

Conclusiones (personales)

La práctica permitió integrar Mapbox con una fuente GeoJSON pública y añadir elementos interactivos sencillos. Para proyectos reales, conviene manejar tokens de forma segura (no embebidos en el código) y mejorar la gestión de capas y estilos (p. ej. usar filtros por magnitud o clustering). En este ejercicio la implementación se mantuvo mínima y explícita para facilitar su comprensión y para que el entregable cumpla exactamente con lo solicitado.

